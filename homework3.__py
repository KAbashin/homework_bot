import logging
import os
import time
import requests
import telegram

from dotenv import load_dotenv
from telegram import Bot, error
from http import HTTPStatus
from logging.handlers import RotatingFileHandler

import exceptions

logging.basicConfig(
    # handlers=[logging.StreamHandler()],
    filename='main.log',
    filemode='a',
    level=logging.DEBUG,
    format='%(asctime)s, %(levelname)s, %(message)s'
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = RotatingFileHandler('my_logger.log', maxBytes=50000000, backupCount=3)
logger.addHandler(handler)

load_dotenv()

PRACTICUM_TOKEN = os.getenv("PRACTICUM_TOKEN")
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
RETRY_TIME = 600
ENDPOINT = 'https://practicum.yandex.ru/api/user_api/homework_statuses/'
HEADERS = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}

HOMEWORK_STATUSES = {
    'approved': 'Работа проверена: ревьюеру всё понравилось. Ура!',
    'reviewing': 'Работа взята на проверку ревьюером.',
    'rejected': 'Работа проверена: у ревьюера есть замечания.'
}

logger.debug('Бот запущен!')


def check_tokens() -> bool:
    """проверяет доступность переменных окружения, которые необходимы для
    работы программы. Если отсутствует хотя бы одна переменная окружения —
    функция должна вернуть False, иначе — True."""
    logger.info('Проверка переменных окружения')
    tokens = [PRACTICUM_TOKEN, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]
    for token in tokens:
        if token is None:
            message = f'Нет переменной окружения - {token}!'
            logger.critical(message)
            return False
    return True


def send_message(bot, message):
    """отправляет сообщение в Telegram чат"""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
        logger.info(f'Отправлено сообщение: "{message}"')
    except Exception as error:
        logger.error(f'Сообщение не отправлено: {error}')


def get_api_answer(current_timestamp):
    """делает запрос к единственному эндпоинту API-сервиса"""
    logger.info("Получение ответа от сервера")
    timestamp = current_timestamp or int(time.time())
    params = {'from_date': timestamp}
    try:
        response = requests.get(ENDPOINT, headers=HEADERS, params=params)
    except Exception:
        message = 'Нет ожидаемого ответа сервера от API'
        logger.error(message)
        raise exceptions.APIAnswerError(message)
    try:
        if response.status_code != HTTPStatus.OK:
            message = (f'Эндпоинт {ENDPOINT} не отвечает, ',
                       f'http status: {response.status_code}')
            logger.error(message)
            raise Exception(message)
    except Exception:
        message = 'Нет ожидаемого ответа сервера от API'
        logger.error(message)
        raise exceptions.APIAnswerError(message)
    return response.json()


def check_response(response):
    """проверяет ответ API на корректность"""
    logger.debug("Проверка ответа API на корректность")
    if not isinstance(response, dict):
        message = 'Ответ от API не словарь'
        logger.error(message)
        raise TypeError(message)
    try:
        timestamp = response['current_date']
    except KeyError:
        message = 'Ключ current_date в ответе API отсутствует'
        logger.error(message)
    try:
        homeworks = response['homeworks']
    except KeyError:
        message = 'Ключ homeworks в ответе API отсутствует'
        logger.error(message)
    if not isinstance(homeworks, list) or homeworks is None:
        raise TypeError('Ожидаем список')
    status = response['homeworks'][0].get('status')
    if status not in HOMEWORK_STATUSES:
        message = f'Ошибка недокументированный статус: {status}'
        logger.error(message)
        raise exceptions.HWStatusError(message)
    if isinstance(timestamp, int) and isinstance(homeworks, list):
        return homeworks
    else:
        raise Exception


def parse_status(homework):
    """извлекает из информации о конкретной домашней работе статус этой
    работы"""
    logger.debug(f'Парсим домашнее задание: {homework}')
    homework_name = homework['homework_name']
    homework_status = homework['status']
    if 'homework_name' not in homework:
        message = f'Ошибка ключа {homework_name}'
        logger.error(message)
        raise KeyError(message)
    elif 'homework_status' not in homework:
        message = f'Ошибка ключа {homework_status}'
        logger.error(message)
        raise KeyError(message)
    elif homework_status not in HOMEWORK_STATUSES:
        raise logger.error('Ошибка статуса')
    verdict = HOMEWORK_STATUSES[homework_status]
    logger.info('Получен статус')
    return f'Изменился статус {verdict}'


"""
def parse_status(homework):
    Извлекает статус из конкретной домашней работы.
    keys = ['status', 'homework_name']
    for key in keys:
        if key not in homework:
            message = f'ключ {key} отсутствует'
            raise KeyError(message)
    homework_name = homework['homework_name']
    homework_status = homework['status']
    if homework_status not in HOMEWORK_STATUSES:
        message = 'неизвестный статус'
        raise KeyError(message)
    verdict = HOMEWORK_STATUSES[homework_status]
    return f'Изменился статус проверки работы "{homework_name}". {verdict}'
"""


def main():
    """Основная логика работы бота."""
    if not check_tokens():
        message = 'Проблемы с переменными окружения'
        raise SystemExit(message)
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    current_timestamp = int(time.time())
    while True:
        try:
            response = get_api_answer(current_timestamp)
            if 'current_date' in response:
                current_timestamp = response['current_date']
            homework = check_response(response)
            if homework is not None:
                message = parse_status(homework)
                if message is not None:
                    send_message(bot, message)
            time.sleep(RETRY_TIME)
        except Exception as error:
            message = f'Ошибка в работе программы: {error}'
            logger.exception(message)
            send_message(bot, message)
            time.sleep(RETRY_TIME)


if __name__ == '__main__':
    main()
